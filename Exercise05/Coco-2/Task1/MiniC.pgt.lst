Coco-2 PGT (source: MiniC.atg)



    1| /* MiniC: (C# Version)                              HDO, 2006-08-27
    2|    -----
    3|    Attributed Grammar for the MiniC Parser.
    4| ===================================================================*/
    5| 
    6| COMPILER MiniC
    7| 
    8| SEM <<
    9|                                     // globals for semantic actions:
   10|   private static String identStr;   //    identifier string
   11|   private static int    numberVal;  //    number value       
   12|        
   13| >>
   14| 
   15| CHARACTER SETS
   16| 
   17|   letter = 'A'..'Z' + 'a'..'z'.
   18|   digit  = '0'..'9'.
   19|   ignore = CHR(9) + EOL IGNORE.
   20| 
   21| COMMENTS
   22|   FROM '/*' TO '*/' NESTED.
   23|   FROM '//' TO EOL.
   24|   
   25| KEYWORDS
   26| 
   27|   'int'.
   28|   'main'.
   29|   'printf'.
   30|   'scanf'.
   31|   'void'.
   32|   'if'.
   33|   'else'.
   34| 
   35| TOKENS
   36| 
   37|   '+'.   '-'.   '*'.  '/'.   '('.   ')'.
   38|   ','.   '='.   ';'.  '{'.   '}'.
   39| 
   40| TOKEN CLASSES
   41|   
   42|   ident<<out String identStr>> =
   43|     letter { letter | digit } 
   44|                                   LEX <<
   45|                                     identStr = tokenStr;
   46|                                   >>
   47|     .
   48| 
   49|   number<<out int numberVal>> =
   50|     digit { digit }               LEX <<
   51|                                     numberVal = Convert.ToInt32(tokenStr);
   52|                                   >>
   53|     .
   54| 
   55| NONTERMINALS 
   56| 
   57|   MiniC.
   58|   VarDecl.
   59|   StatSeq.
   60|   Stat.
   61|   Expr.
   62|   Term.
   63|   Fact.
   64| 
   65| RULES
   66| 
   67|   MiniC =                                          
   68|     'void' 'main' '(' ')'
   69|     '{'
   70|     [ VarDecl
   71|     ]
   72|     StatSeq
   73|     '}' .
   74| 
   75|   VarDecl =                       
   76|     'int' ident<<out identStr>>   
   77|     { ',' ident<<out identStr>>   
   78|     }
   79|     ';' .
   80| 
   81|   StatSeq =
   82|     Stat 
   83|     { Stat 
!WRN!        ^LL(1) error (start AND succ): ";"
   84|     } .
   85| 
   86|   Stat =                          
   87|     [ ident<<out identStr>>       
   88|       '=' Expr           
   89|     | 'scanf'
   90|       '(' ident<<out identStr>>   
   91|       ')'
   92|     | 'printf'
   93|       '(' Expr           
   94|       ')'
   95|     | 'if' '(' Expr ')' StatSeq ['else' StatSeq]
   96|     ] 
   97|     ';' .
   98| 
   99|   Expr =             
  100|     Term
  101|     { '+' Term           
  102|     | '-' Term           
  103|     } .
  104| 
  105|    Term =            
  106|      Fact
  107|      { '*' Fact          
  108|      | '/' Fact         
  109|      } .
  110| 
  111|    Fact =            
  112|        ident<<out identStr>>      
  113|      | number<<out numberVal>>    
  114|      | '(' Expr 
  115|        ')' .
  116| 
  117| END MiniC.


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    1 warning(s)       


statistics:
----------

   20 terminals
    7 nonterminals
   21 alternatives
   58 nodes in top-down graph
    3 eps sets (with look ahead)
    1 any sets

  196 bytes G-code

grammar has no deletable nonterminals
-------------------------------------



G-code:

======

-----  MiniC  ------------------------------
    1  T      void
    3  T      main
    5  T      '('
    7  T      ')'
    9  T      '{'
   11  NTA    VarDecl                16    1
   16  NT     StatSeq                 2
   19  T      '}'
   21  RET

-----  VarDecl  ----------------------------
   22  T      int
   24  TC     ident                   1
   27  TA     ','                    37
   31  TC     ident                   2
   34  JMP       27

   37  T      ';'
   39  RET

-----  StatSeq  ----------------------------
   40  NT     Stat                    1
   43  NTA    Stat                   51    2
   48  JMP       43

   51  EPS        1
   53  RET

-----  Stat  -------------------------------
   54  TCA    ident                  67    1
   59  T      '='
   61  NT     Expr                    2
   64  T      ';'
   66  RET

   67  TA     scanf                  81
   71  T      '('
   73  TC     ident                   3
   76  T      ')'
   78  JMP       64

   81  TA     printf                 95
   85  T      '('
   87  NT     Expr                    4
   90  T      ')'
   92  JMP       64

   95  TA     if                     64
   99  T      '('
  101  NT     Expr                    5
  104  T      ')'
  106  NT     StatSeq                 6
  109  TA     else                   64
  113  NT     StatSeq                 7
  116  JMP       64

-----  Expr  -------------------------------
  119  NT     Term                    1
  122  TA     '+'                   132
  126  NT     Term                    2
  129  JMP      122

  132  TA     '-'                   142
  136  NT     Term                    3
  139  JMP      122

  142  EPS        2
  144  RET

-----  Term  -------------------------------
  145  NT     Fact                    1
  148  TA     '*'                   158
  152  NT     Fact                    2
  155  JMP      148

  158  TA     '/'                   168
  162  NT     Fact                    3
  165  JMP      148

  168  EPS        3
  170  RET

-----  Fact  -------------------------------
  171  TCA    ident                 177    1
  176  RET

  177  TCA    number                183    2
  182  RET

  183  T      '('
  185  NT     Expr                    3
  188  T      ')'
  190  RET

-----  R o o t  ----------------------------
  191  NT     MiniC                   1
  194  T      'end of file'
  196  RET


nonterminals:
============

MiniC                     1     { void }
VarDecl                  22     { int }
StatSeq                  40     { printf, scanf, if, ';', ident }
Stat                     54     { printf, scanf, if, ';', ident }
Expr                    119     { '(', ident, number }
Term                    145     { '(', ident, number }
Fact                    171     { '(', ident, number }


eps look-aheads:
===============

    1   { else, ';', '}' }
    2   { ')', ';' }
    3   { '+', '-', ')', ';' }

Coco-2 SG (source: MiniC.atg)

    1| /* MiniC: (C# Version)                              HDO, 2006-08-27
    2|    -----
    3|    Attributed Grammar for the MiniC Parser.
    4| ===================================================================*/
    5| 
    6| COMPILER MiniC
    7| 
    8| SEM <<
    9|                                     // globals for semantic actions:
   10|   private static String identStr;   //    identifier string
   11|   private static int    numberVal;  //    number value       
   12|        
   13| >>
   14| 
   15| CHARACTER SETS
   16| 
   17|   letter = 'A'..'Z' + 'a'..'z'.
   18|   digit  = '0'..'9'.
   19|   ignore = CHR(9) + EOL IGNORE.
   20| 
   21| COMMENTS
   22|   FROM '/*' TO '*/' NESTED.
   23|   FROM '//' TO EOL.
   24|   
   25| KEYWORDS
   26| 
   27|   'int'.
   28|   'main'.
   29|   'printf'.
   30|   'scanf'.
   31|   'void'.
   32| 
   33| TOKENS
   34| 
   35|   '+'.   '-'.   '*'.  '/'.   '('.   ')'.
   36|   ','.   '='.   ';'.  '{'.   '}'.
   37| 
   38| TOKEN CLASSES
   39|   
   40|   ident<<out String identStr>> =
   41|     letter { letter | digit } 
   42|                                   LEX <<
   43|                                     identStr = tokenStr;
   44|                                   >>
   45|     .
   46| 
   47|   number<<out int numberVal>> =
   48|     digit { digit }               LEX <<
   49|                                     numberVal = Convert.ToInt32(tokenStr);
   50|                                   >>
   51|     .
   52| 
   53| NONTERMINALS 
   54| 
   55|   MiniC.
   56|   VarDecl.
   57|   StatSeq.
   58|   Stat.
   59|   Expr.
   60|   Term.
   61|   Fact.
   62| 
   63| RULES
   64| 
   65|   MiniC =                                          
   66|     'void' 'main' '(' ')'
   67|     '{'
   68|     [ VarDecl
   69|     ]
   70|     StatSeq
   71|     '}' .
   72| 
   73|   VarDecl =                       
   74|     'int' ident<<out identStr>>   
   75|     { ',' ident<<out identStr>>   
   76|     }
   77|     ';' .
   78| 
   79|   StatSeq =
   80|     Stat 
   81|     { Stat 
   82|     } .
   83| 
   84|   Stat =                          
   85|     [ ident<<out identStr>>       
   86|       '=' Expr           
   87|     | 'scanf'
   88|       '(' ident<<out identStr>>   
   89|       ')'
   90|     | 'printf'
   91|       '(' Expr           
   92|       ')' 
   93|     ] 
   94|     ';' .
   95| 
   96|   Expr =             
   97|     Term
   98|     { '+' Term           
   99|     | '-' Term           
  100|     } .
  101| 
  102|    Term =            
  103|      Fact
  104|      { '*' Fact          
  105|      | '/' Fact         
  106|      } .
  107| 
  108|    Fact =            
  109|        ident<<out identStr>>      
  110|      | number<<out numberVal>>    
  111|      | '(' Expr 
  112|        ')' .
  113| 
  114| END MiniC.


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    0 warning(s)       


start table:
-----------

   '('                     6 | ')'                       7
   '*'                     4 | '+'                       2
   ','                     8 | '-'                       3
   '/'                     5 | '0'..'9'                 14
   ';'                    10 | '='                       9
   'A'..'Z'               13 | 'a'                      15
   'b'                    13 | 'c'..'d'                 15
   'e'                    13 | 'f'                      15
   'g'..'h'               13 | 'i'                      15
   'j'..'l'               13 | 'm'..'p'                 15
   'q'                    13 | 'r'..'t'                 15
   'u'                    13 | 'v'                      15
   'w'..'z'               13 | '{'                      11
   '}'                    12 | ELSE                      0
   

ignored characters:
------------------

{ HT..LF, ' ' }

comment starts:
--------------

{ '/' }

character classes:
-----------------

1: { 'A'..'Z', 'a'..'z' }

2: { '0'..'9' }

3: { 'a', 'c'..'d', 'f', 'i', 'm'..'p', 'r'..'t', 'v' }

4: { 'A'..'Z', 'b', 'e', 'g'..'h', 'j'..'l', 'q', 'u', 'w'..'z' }
